{"version":3,"sources":["SeriesList.module.scss","SeriesThumbnail.module.scss","SeriesDetails.module.scss","App.module.scss","SeriesThumbnail.tsx","SeriesDetails.tsx","SeriesList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SeriesThumbnail","onClick","detailsOpen","imageElement","useRef","enterLeaveStyleProperties","transform","opacity","transitions","useTransition","from","enter","leave","className","styles","event","current","getBoundingClientRect","ref","map","item","props","key","div","style","SeriesDetails","isOpen","initialCoordinates","onRequestClose","x","y","width","height","top","left","delay","baseStyleProperties","window","innerWidth","innerHeight","config","mass","tension","friction","SeriesList","useState","setDetailsOpen","detailsInitialCoordinates","setDetailsInitialCoordinates","openDetails","coordinates","App","app","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b06ea914.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"series-list\":\"SeriesList_series-list__2WWko\",\"series-list__top-bar\":\"SeriesList_series-list__top-bar__knknj\",\"series-list__header\":\"SeriesList_series-list__header__2LQ8D\",\"series-list__see-all\":\"SeriesList_series-list__see-all__36sLN\",\"series-list__thumbnails\":\"SeriesList_series-list__thumbnails__2c_9T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"series-thumbnail\":\"SeriesThumbnail_series-thumbnail__J97jg\",\"series-thumbnail__image\":\"SeriesThumbnail_series-thumbnail__image__fn8V2\",\"series-thumbnail__title\":\"SeriesThumbnail_series-thumbnail__title__3WZIu\",\"series-thumbnail__main-text\":\"SeriesThumbnail_series-thumbnail__main-text__3nUoF\",\"series-thumbnail__sub-text\":\"SeriesThumbnail_series-thumbnail__sub-text__2H_Hj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"series-details\":\"SeriesDetails_series-details__GyUme\",\"series-details__image\":\"SeriesDetails_series-details__image__lF3Ud\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\"};","import React, { MouseEvent, useRef, useState } from 'react';\nimport styles from './SeriesThumbnail.module.scss';\nimport { useTransition, animated } from 'react-spring';\n\nexport interface SeriesThumbnailProps {\n  onClick: (coordinates: DOMRect) => void;\n  detailsOpen: boolean;\n}\n\nconst SeriesThumbnail: React.FC<SeriesThumbnailProps> = ({\n  onClick,\n  detailsOpen,\n}) => {\n  const imageElement = useRef<HTMLDivElement>(null);\n\n  const handleClick = (event: MouseEvent) => {\n    onClick(imageElement.current!.getBoundingClientRect());\n  };\n\n  const enterLeaveStyleProperties = {\n    transform: 'translateY(-200%)',\n    opacity: 0,\n  };\n\n  const baseStyleProperties = {\n    transform: 'translateY(0)',\n    opacity: 1,\n  };\n\n  const transitions = useTransition(!detailsOpen, null, {\n    from: enterLeaveStyleProperties,\n    enter: baseStyleProperties,\n    leave: enterLeaveStyleProperties,\n  });\n\n  return (\n    <>\n      <div className={styles['series-thumbnail']} onClick={handleClick}>\n        <div className={styles['series-thumbnail__image']} ref={imageElement}>\n          <div className={styles['series-thumbnail__title']}>\n            The Handmaid's Tale\n          </div>\n        </div>\n        {transitions.map(\n          ({ item, key, props }) =>\n            item && (\n              <>\n                <animated.div\n                  className={styles['series-thumbnail__main-text']}\n                  style={props}\n                >\n                  Rated by a friend\n                </animated.div>\n                <animated.div\n                  className={styles['series-thumbnail__sub-text']}\n                  style={props}\n                >\n                  3 Seasons\n                </animated.div>\n              </>\n            )\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default SeriesThumbnail;\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useTransition, animated, config } from 'react-spring';\nimport styles from './SeriesDetails.module.scss';\n\nexport interface SeriesDetailsProps {\n  isOpen: boolean;\n  initialCoordinates?: DOMRect;\n  onRequestClose: () => void;\n}\n\nconst SeriesDetails: React.FC<SeriesDetailsProps> = ({\n  isOpen,\n  initialCoordinates,\n  onRequestClose,\n}) => {\n  const { x, y, width, height } = initialCoordinates || {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n  };\n\n  const enterLeaveStyleProperties = {\n    top: y,\n    left: x,\n    width: width,\n    height: height,\n    delay: 500,\n  };\n\n  const baseStyleProperties = {\n    top: 0,\n    left: 0,\n    width: window.innerWidth,\n    height: window.innerHeight,\n    delay: 500,\n  };\n\n  const transitions = useTransition(isOpen, null, {\n    from: enterLeaveStyleProperties,\n    enter: baseStyleProperties,\n    leave: enterLeaveStyleProperties,\n    config: {\n      mass: 1,\n      tension: 300,\n      friction: 35,\n    },\n  });\n\n  return (\n    <>\n      {transitions.map(\n        ({ item, key, props }) =>\n          item && (\n            <animated.div\n              key={key}\n              style={props}\n              className={styles['series-details']}\n              onClick={onRequestClose}\n            >\n              <div className={styles['series-details__image']}></div>\n            </animated.div>\n          )\n      )}\n    </>\n  );\n};\n\nexport default SeriesDetails;\n","import React, { useState } from 'react';\n\nimport styles from './SeriesList.module.scss';\nimport SeriesThumbnail from './SeriesThumbnail';\nimport SeriesDetails from './SeriesDetails';\n\nexport interface SeriesListProps {}\n\nconst SeriesList: React.FC<SeriesListProps> = (props) => {\n  const [detailsOpen, setDetailsOpen] = useState(false);\n  const [detailsInitialCoordinates, setDetailsInitialCoordinates] = useState<\n    DOMRect\n  >();\n\n  const openDetails = (coordinates: DOMRect) => {\n    setDetailsOpen(true);\n    setDetailsInitialCoordinates(coordinates);\n  };\n\n  return (\n    <>\n      <div className={styles['series-list']}>\n        <div className={styles['series-list__top-bar']}>\n          <h2 className={styles['series-list__header']}>Series for you</h2>\n          <div className={styles['series-list__see-all']}>See all 10</div>\n        </div>\n        <div className={styles['series-list__thumbnails']}>\n          <SeriesThumbnail onClick={openDetails} detailsOpen={detailsOpen} />\n          <SeriesThumbnail onClick={openDetails} detailsOpen={detailsOpen} />\n          <SeriesThumbnail onClick={openDetails} detailsOpen={detailsOpen} />\n          <SeriesThumbnail onClick={openDetails} detailsOpen={detailsOpen} />\n          <SeriesThumbnail onClick={openDetails} detailsOpen={detailsOpen} />\n        </div>\n      </div>\n      <SeriesDetails\n        isOpen={detailsOpen}\n        initialCoordinates={detailsInitialCoordinates}\n        onRequestClose={() => setDetailsOpen(false)}\n      />\n    </>\n  );\n};\n\nexport default SeriesList;\n","import React from 'react';\nimport styles from './App.module.scss';\nimport SeriesList from './SeriesList';\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <SeriesList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}